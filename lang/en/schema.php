<?php

return [
    'description' => 'A GraphQL Schema defines the capabilities of a GraphQL server. It exposes all available types and directives on the server, as well as the entry points for query, mutation, and subscription operations.',
    'directives.deprecated' => 'Marks an element of a GraphQL schema as no longer supported.',
    'directives.deprecated.reason' => 'Explains why this element was deprecated, usually also including a suggestion for how to access supported similar data. Formatted using the Markdown syntax (as specified by [CommonMark](https://commonmark.org/).',
    'directives.include' => 'Directs the executor to include this field or fragment only when the `if` argument is true.',
    'directives.include.args.if' => 'Included when true.',
    'directives.skip' => 'Directs the executor to skip this field or fragment when the `if` argument is true.',
    'directives.skip.args.if' => 'Skipped when true.',
    'inputvalue.field.defaultValue' => 'A GraphQL-formatted string representing the default value for this input value.',
    'types.directiveLocation.ARGUMENT_DEFINITION' => 'Location adjacent to an argument definition.',
    'types.directiveLocation.ENUM' => 'Location adjacent to an enum definition.',
    'types.directiveLocation.ENUM_VALUE' => 'Location adjacent to an enum value definition.',
    'types.directiveLocation.FIELD' => 'Location adjacent to a field.',
    'types.directiveLocation.FIELD_DEFINITION' => 'Location adjacent to a field definition.',
    'types.directiveLocation.FRAGMENT_DEFINITION' => 'Location adjacent to a fragment definition.',
    'types.directiveLocation.FRAGMENT_SPREAD' => 'Location adjacent to a fragment spread.',
    'types.directiveLocation.INLINE_FRAGMENT' => 'Location adjacent to an inline fragment.',
    'types.directiveLocation.INPUT_FIELD_DEFINITION' => 'Location adjacent to an input object field definition.',
    'types.directiveLocation.INPUT_OBJECT' => 'Location adjacent to an input object type definition.',
    'types.directiveLocation.INTERFACE' => 'Location adjacent to an interface definition.',
    'types.directiveLocation.LIST' => 'Indicates this type is a list. `ofType` is a valid field.',
    'types.directiveLocation.MUTATION' => 'Location adjacent to a mutation operation.',
    'types.directiveLocation.OBJECT' => 'Location adjacent to an object type definition.',
    'types.directiveLocation.QUERY' => 'Location adjacent to a query operation.',
    'types.directiveLocation.SCALAR' => 'Location adjacent to a scalar definition.',
    'types.directiveLocation.SCHEMA' => 'Location adjacent to a schema definition.',
    'types.directiveLocation.SUBSCRIPTION' => 'Location adjacent to a subscription operation.',
    'types.directiveLocation.UNION' => 'Location adjacent to a union definition.',
    'types.directiveLocation.VARIABLE_DEFINITION' => 'Location adjacent to a variable definition.',
    'types.enumValues.ENUM' => 'Indicates this type is an enum. `enumValues` is a valid field.',
    'types.enumValues.INPUT_OBJECT' => 'Indicates this type is an input object. `inputFields` is a valid field.',
    'types.enumValues.INTERFACE' => 'Indicates this type is an interface. `fields`, `interfaces`, and `possibleTypes` are valid fields.',
    'types.enumValues.LIST' => 'Indicates this type is a list. `ofType` is a valid field.',
    'types.enumValues.NON_NULL' => 'Indicates this type is a non-null. `ofType` is a valid field.',
    'types.enumValues.OBJECT' => 'Indicates this type is an object. `fields` and `interfaces` are valid fields.',
    'types.enumValues.SCALAR' => 'Indicates this type is a scalar.',
    'types.enumValues.UNION' => 'Indicates this type is a union. `possibleTypes` is a valid field.',
    'types.field.directives' => 'A list of all directives supported by this server.',
    'types.field.mutationType' => 'If this server supports mutation, the type that mutation operations will be rooted at.',
    'types.field.queryType' => 'The type that query operations will be rooted at.',
    'types.field.subscriptionType' => 'If this server support subscription, the type that subscription operations will be rooted at.',
    'types.field.types' => 'A list of all types supported by this server.',
];
